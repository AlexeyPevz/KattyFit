import { NextRequest, NextResponse } from "next/server"
import { supabaseAdmin } from "@/lib/supabase-admin"
import { env } from "@/lib/env"
import logger from "@/lib/logger"

// –î–ª—è MVP –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î
// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å API

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = request.nextUrl
    const startDate = searchParams.get('startDate')
    const endDate = searchParams.get('endDate')
    const trainerId = searchParams.get('trainerId') || '1' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–∞—Ç–∏
    
    if (!startDate || !endDate) {
      return NextResponse.json(
        { error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã" },
        { status: 400 }
      )
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
    const { data: schedule } = await supabaseAdmin
      .from('trainer_schedule')
      .select('*')
      .eq('trainer_id', trainerId)
      .single()
      
    if (!schedule) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      const defaultSchedule = {
        workDays: [1, 2, 3, 4, 5, 6], // –ü–Ω-–°–±
        workHours: {
          start: "09:00",
          end: "20:00"
        },
        slotDuration: 60, // –º–∏–Ω—É—Ç
        breakDuration: 15, // –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∑–∞–Ω—è—Ç–∏—è–º–∏
        unavailableDates: []
      }
      
      return generateSlots(startDate, endDate, defaultSchedule, trainerId)
    }
    
    return generateSlots(startDate, endDate, schedule, trainerId)
    
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤", { error: error instanceof Error ? error.message : String(error) })
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è" },
      { status: 500 }
    )
  }
}

async function generateSlots(
  startDate: string, 
  endDate: string, 
  schedule: Record<string, unknown>,
  trainerId: string
) {
  const slots: Record<string, string[]> = {}
  const start = new Date(startDate)
  const end = new Date(endDate)
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const { data: bookings } = await supabaseAdmin
    .from('bookings')
    .select('booking_date, booking_time')
    .eq('trainer_id', trainerId)
    .eq('status', 'confirmed')
    .gte('booking_date', startDate)
    .lte('booking_date', endDate)
    
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
  const bookedSlots = new Map()
  bookings?.forEach(booking => {
    const key = booking.booking_date
    if (!bookedSlots.has(key)) {
      bookedSlots.set(key, new Set())
    }
    bookedSlots.get(key).add(booking.booking_time)
  })
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
  for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
    const dayOfWeek = d.getDay()
    const dateStr = d.toISOString().split('T')[0]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–∏–π –ª–∏ –¥–µ–Ω—å
    if (!(schedule.workDays as number[]).includes(dayOfWeek)) continue
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    if ((schedule.unavailableDates as string[])?.includes(dateStr)) continue
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    const daySlots: string[] = []
    const workHours = schedule.workHours as { start: string; end: string }
    const [startHour, startMin] = workHours.start.split(':').map(Number)
    const [endHour, endMin] = workHours.end.split(':').map(Number)
    
    const startMinutes = startHour * 60 + startMin
    const endMinutes = endHour * 60 + endMin
    const slotDuration = (schedule.slotDuration as number) + (schedule.breakDuration as number)
    
    for (let minutes = startMinutes; minutes + (schedule.slotDuration as number) <= endMinutes; minutes += slotDuration) {
      const hours = Math.floor(minutes / 60)
      const mins = minutes % 60
      const timeStr = `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
      if (!bookedSlots.get(dateStr)?.has(timeStr)) {
        daySlots.push(timeStr)
      }
    }
    
    if (daySlots.length > 0) {
      slots[dateStr] = daySlots
    }
  }
  
  return NextResponse.json({ slots })
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { 
      userId, 
      trainerId = '1',
      serviceType,
      bookingDate,
      bookingTime,
      duration = 60,
      price,
      notes
    } = body
    
    if (!userId || !bookingDate || !bookingTime) {
      return NextResponse.json(
        { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" },
        { status: 400 }
      )
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
    const { data: existing } = await supabaseAdmin
      .from('bookings')
      .select('id')
      .eq('trainer_id', trainerId)
      .eq('booking_date', bookingDate)
      .eq('booking_time', bookingTime)
      .eq('status', 'confirmed')
      .single()
      
    if (existing) {
      return NextResponse.json(
        { error: "–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç" },
        { status: 409 }
      )
    }
    
    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { data: booking, error } = await supabaseAdmin
      .from('bookings')
      .insert({
        user_id: userId,
        trainer_id: trainerId,
        service_type: serviceType,
        booking_date: bookingDate,
        booking_time: bookingTime,
        duration_minutes: duration,
        status: 'pending', // –°—Ç–∞–Ω–µ—Ç confirmed –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        price: price,
        notes: notes,
        created_at: new Date().toISOString()
      })
      .select()
      .single()
      
    if (error) {
      logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", { error: error instanceof Error ? error.message : String(error) })
      return NextResponse.json(
        { error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" },
        { status: 500 }
      )
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
    try {
      if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_TRAINER_CHAT_ID) {
        await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: process.env.TELEGRAM_TRAINER_CHAT_ID,
            text: `üÜï –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\nüÜî ID: ${booking.id}\nüìÖ ${bookingDate} –≤ ${bookingTime}\nüéØ –¢–∏–ø: ${serviceType}\nüí∞ –¶–µ–Ω–∞: ${price}‚ÇΩ\nüí¨ ${notes || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}`,
            parse_mode: 'HTML'
          })
        })
      }
    } catch (error) {
      logger.warn('Failed to send trainer notification', { error: error instanceof Error ? error.message : String(error) })
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    // –°–º–æ—Ç—Ä–∏ /api/payments/success/route.ts
    
    return NextResponse.json({ booking })
    
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", { error: error instanceof Error ? error.message : String(error) })
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" },
      { status: 500 }
    )
  }
}
