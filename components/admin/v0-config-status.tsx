"use client"

import { useEffect, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { CheckCircle, XCircle, AlertTriangle, RefreshCw } from "lucide-react"

interface ConfigStatus {
  isConfigured: boolean
  missingVars: string[]
  warnings: string[]
  recommendations: string[]
}

export function V0ConfigStatus() {
  const [status, setStatus] = useState<ConfigStatus | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  const checkConfig = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('/api/settings/config-status')
      const data = await response.json()
      setStatus(data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    checkConfig()
  }, [])

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <RefreshCw className="h-4 w-4 animate-spin" />
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ v0...
          </CardTitle>
        </CardHeader>
      </Card>
    )
  }

  if (!status) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-red-600">
            <XCircle className="h-4 w-4" />
            –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Button onClick={checkConfig} variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          {status.isConfigured ? (
            <CheckCircle className="h-4 w-4 text-green-600" />
          ) : (
            <XCircle className="h-4 w-4 text-red-600" />
          )}
          –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ v0
        </CardTitle>
        <CardDescription>
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å */}
        <div className="flex items-center gap-2">
          <Badge variant={status.isConfigured ? "default" : "destructive"}>
            {status.isConfigured ? "–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" : "–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"}
          </Badge>
          <Button onClick={checkConfig} variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-1" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>

        {/* –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ */}
        {status.missingVars.length > 0 && (
          <div>
            <h4 className="font-medium text-red-600 mb-2 flex items-center gap-1">
              <XCircle className="h-4 w-4" />
              –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
            </h4>
            <div className="space-y-1">
              {status.missingVars.map((varName) => (
                <div key={varName} className="text-sm font-mono bg-red-50 p-2 rounded">
                  {varName}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
        {status.warnings.length > 0 && (
          <div>
            <h4 className="font-medium text-yellow-600 mb-2 flex items-center gap-1">
              <AlertTriangle className="h-4 w-4" />
              –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:
            </h4>
            <ul className="space-y-1">
              {status.warnings.map((warning, index) => (
                <li key={index} className="text-sm text-yellow-700">
                  ‚Ä¢ {warning}
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {status.recommendations.length > 0 && (
          <div>
            <h4 className="font-medium text-blue-600 mb-2">
              üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            </h4>
            <ul className="space-y-1">
              {status.recommendations.map((rec, index) => (
                <li key={index} className="text-sm text-blue-700">
                  ‚Ä¢ {rec}
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è v0 */}
        {!status.isConfigured && (
          <div className="mt-4 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-medium text-blue-800 mb-2">
              üîß –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ v0:
            </h4>
            <ol className="text-sm text-blue-700 space-y-1 list-decimal list-inside">
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –≤ v0.dev</li>
              <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Environment Variables</li>
              <li>–î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</li>
              <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç</li>
            </ol>
          </div>
        )}
      </CardContent>
    </Card>
  )
}