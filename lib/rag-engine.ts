import { RAGContext, KnowledgeItem } from '@/types/api'
import { AIServiceFactory } from './services/ai-service'
import { DatabaseServiceFactory } from './services/database-service'
import logger from './logger'

// –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
async function searchKnowledge(query: string): Promise<KnowledgeItem[]> {
  try {
    const database = DatabaseServiceFactory.createFromEnv()
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection
    const sanitizedQuery = query.replace(/[%_]/g, '\\$&')
    
    const knowledge = await database.executeQuery<KnowledgeItem>(
      `SELECT * FROM knowledge_base 
       WHERE (question ILIKE $1 OR answer ILIKE $1) 
       AND is_active = true 
       ORDER BY created_at DESC 
       LIMIT 5`,
      [`%${sanitizedQuery}%`]
    )

    return knowledge
  } catch (error) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    await logger.error('Knowledge search failed', {
      query: query.substring(0, 100),
      error: error instanceof Error ? error.message : 'Unknown error'
    }, error instanceof Error ? error : undefined)
    return []
  }
}


// Fallback –æ—Ç–≤–µ—Ç—ã –±–µ–∑ AI
function generateFallbackResponse(context: RAGContext, knowledge: KnowledgeItem[]): string {
  const message = context.userMessage.toLowerCase()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  for (const item of knowledge) {
    if (item.question && message.includes(item.question.toLowerCase())) {
      return item.answer || "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä—É."
    }
  }

  // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  if (message.includes("–ø—Ä–∏–≤–µ—Ç") || message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π")) {
    return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø –ø–æ–º–æ—â–Ω–∏–∫ KattyFit. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä"
  }

  if (message.includes("—Ü–µ–Ω") || message.includes("—Å—Ç–æ–∏–º–æ—Å—Ç—å") || message.includes("—Å–∫–æ–ª—å–∫–æ")) {
    return `–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 2500‚ÇΩ
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è - –æ—Ç 800‚ÇΩ
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π - 6000‚ÇΩ (—Å–∫–∏–¥–∫–∞ 20%)
‚Ä¢ –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 500‚ÇΩ

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?`
  }

  if (message.includes("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏") || message.includes("–≤—Ä–µ–º—è") || message.includes("–∫–æ–≥–¥–∞")) {
    return `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:
‚Ä¢ –ü–Ω, –°—Ä, –ü—Ç - 10:00, 17:00, 19:00
‚Ä¢ –í—Ç, –ß—Ç - 11:00, 18:00
‚Ä¢ –°–± - 10:00, 12:00
‚Ä¢ –í—Å - –ø–æ –∑–∞–ø–∏—Å–∏

–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ?`
  }

  if (message.includes("–∞–¥—Ä–µ—Å") || message.includes("–≥–¥–µ") || message.includes("–Ω–∞—Ö–æ–¥–∏—Ç—Å—è")) {
    return "–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123. –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è. –ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?"
  }

  if (message.includes("–∑–∞–ø–∏—Å") || message.includes("—Ö–æ—á—É") || message.includes("–º–æ–∂–Ω–æ")) {
    return "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ–Ω–µ—Ä—É. –ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: +7 (999) 123-45-67"
  }

  // –û–±—â–∏–π fallback
  return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ö–∞—Ç–µ, –∏ –æ–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π, –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (999) 123-45-67"
}


// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
export async function generateRAGResponse(context: RAGContext): Promise<string> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
    const knowledge = await searchKnowledge(context.userMessage)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
    const enrichedContext: RAGContext = {
      ...context,
      platform: context.platform || "web",
      chatHistory: context.chatHistory.map(msg => ({
        ...msg,
        platform: msg.platform || context.platform || "web"
      })),
      userContext: {
        ...context.userContext,
        knowledge,
      },
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å
    const aiService = await AIServiceFactory.createAvailableService()
    
    if (aiService.getServiceName() !== 'Fallback') {
      try {
        const response = await aiService.generateResponse(enrichedContext)
        return response
      } catch (error) {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ AI —Å–µ—Ä–≤–∏—Å–∞
        await logger.warn(`${aiService.getServiceName()} failed, using fallback`, {
          service: aiService.getServiceName(),
          error: error instanceof Error ? error.message : 'Unknown error'
        }, error instanceof Error ? error : undefined)
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç
    return generateFallbackResponse(enrichedContext, knowledge)
  } catch (error) {
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ RAG engine
    await logger.critical('RAG engine critical error', {
      context: {
        userMessage: context.userMessage.substring(0, 100),
        platform: context.platform,
        conversationId: context.conversationId
      }
    }, error instanceof Error ? error : undefined)
    return generateFallbackResponse(context, [])
  }
}
