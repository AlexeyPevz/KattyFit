import { supabase } from "./supabase"

interface RAGContext {
  userMessage: string
  chatHistory?: any[]
  platform?: string
  userName?: string
  userContext?: any
}

interface KnowledgeItem {
  type: "faq" | "dialog_example" | "course_info" | "pricing"
  question?: string
  answer?: string
  context?: any
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
async function getAIServiceKey(service: "yandexgpt" | "openai"): Promise<string | null> {
  const { data } = await supabase
    .from("api_keys")
    .select("key_value")
    .eq("service", service)
    .eq("is_active", true)
    .single()
  
  return data?.key_value || null
}

// –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
async function searchKnowledge(query: string): Promise<KnowledgeItem[]> {
  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (–≤ –∏–¥–µ–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)
  const { data, error } = await supabase
    .from("knowledge_base")
    .select("*")
    .eq("is_active", true)
    .or(`question.ilike.%${query}%,answer.ilike.%${query}%`)
    .limit(5)

  if (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:", error)
    return []
  }

  return data || []
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ YandexGPT
async function generateYandexGPTResponse(context: RAGContext, knowledge: KnowledgeItem[]): Promise<string> {
  const apiKey = await getAIServiceKey("yandexgpt")
  if (!apiKey) {
    throw new Error("YandexGPT API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
  const systemPrompt = `–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞ KattyFit.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç—è–∂–∫–µ, –∞—ç—Ä–æ–π–æ–≥–µ –∏ –∑–∞–Ω—è—Ç–∏—è—Ö.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –∫–æ–≥–¥–∞ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
–û—Ç–≤–µ—á–∞–π –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é.`

  const knowledgeContext = knowledge.map(item => 
    `Q: ${item.question}\nA: ${item.answer}`
  ).join("\n\n")

  const userPrompt = `–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
${knowledgeContext}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${context.chatHistory?.map(m => `${m.type}: ${m.text}`).join("\n") || "–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"}

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${context.platform || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${context.userName || "–ì–æ—Å—Ç—å"}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${context.userMessage}

–û—Ç–≤–µ—Ç:`

  try {
    const response = await fetch("https://llm.api.cloud.yandex.net/foundationModels/v1/completion", {
      method: "POST",
      headers: {
        "Authorization": `Api-Key ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        modelUri: "gpt://b1g5og5o73gqkcbbhotr/yandexgpt-lite",
        completionOptions: {
          stream: false,
          temperature: 0.7,
          maxTokens: 500,
        },
        messages: [
          { role: "system", text: systemPrompt },
          { role: "user", text: userPrompt },
        ],
      }),
    })

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ YandexGPT API")
    }

    const data = await response.json()
    return data.result.alternatives[0].message.text
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ YandexGPT:", error)
    // Fallback –Ω–∞ OpenAI –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
    return generateFallbackResponse(context, knowledge)
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
async function generateOpenAIResponse(context: RAGContext, knowledge: KnowledgeItem[]): Promise<string> {
  const apiKey = await getAIServiceKey("openai")
  if (!apiKey) {
    throw new Error("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
  }

  const systemPrompt = `You are a friendly fitness assistant for KattyFit.
Answer questions about stretching, aerial yoga, and classes.
Use the knowledge base when possible.
Be friendly but professional.
If unsure, suggest contacting the trainer directly.
Answer in Russian.`

  const knowledgeContext = knowledge.map(item => 
    `Q: ${item.question}\nA: ${item.answer}`
  ).join("\n\n")

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: `Knowledge base:\n${knowledgeContext}\n\nUser question: ${context.userMessage}` },
        ],
        temperature: 0.7,
        max_tokens: 500,
      }),
    })

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ OpenAI API")
    }

    const data = await response.json()
    return data.choices[0].message.content
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenAI:", error)
    return generateFallbackResponse(context, knowledge)
  }
}

// Fallback –æ—Ç–≤–µ—Ç—ã –±–µ–∑ AI
function generateFallbackResponse(context: RAGContext, knowledge: KnowledgeItem[]): string {
  const message = context.userMessage.toLowerCase()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  for (const item of knowledge) {
    if (item.question && message.includes(item.question.toLowerCase())) {
      return item.answer || "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä—É."
    }
  }

  // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  if (message.includes("–ø—Ä–∏–≤–µ—Ç") || message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π")) {
    return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø –ø–æ–º–æ—â–Ω–∏–∫ KattyFit. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä"
  }

  if (message.includes("—Ü–µ–Ω") || message.includes("—Å—Ç–æ–∏–º–æ—Å—Ç—å") || message.includes("—Å–∫–æ–ª—å–∫–æ")) {
    return `–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 2500‚ÇΩ
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è - –æ—Ç 800‚ÇΩ
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π - 6000‚ÇΩ (—Å–∫–∏–¥–∫–∞ 20%)
‚Ä¢ –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 500‚ÇΩ

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?`
  }

  if (message.includes("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏") || message.includes("–≤—Ä–µ–º—è") || message.includes("–∫–æ–≥–¥–∞")) {
    return `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:
‚Ä¢ –ü–Ω, –°—Ä, –ü—Ç - 10:00, 17:00, 19:00
‚Ä¢ –í—Ç, –ß—Ç - 11:00, 18:00
‚Ä¢ –°–± - 10:00, 12:00
‚Ä¢ –í—Å - –ø–æ –∑–∞–ø–∏—Å–∏

–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ?`
  }

  if (message.includes("–∞–¥—Ä–µ—Å") || message.includes("–≥–¥–µ") || message.includes("–Ω–∞—Ö–æ–¥–∏—Ç—Å—è")) {
    return "–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123. –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è. –ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?"
  }

  if (message.includes("–∑–∞–ø–∏—Å") || message.includes("—Ö–æ—á—É") || message.includes("–º–æ–∂–Ω–æ")) {
    return "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ–Ω–µ—Ä—É. –ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: +7 (999) 123-45-67"
  }

  // –û–±—â–∏–π fallback
  return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ö–∞—Ç–µ, –∏ –æ–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π, –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (999) 123-45-67"
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
export async function generateRAGResponse(context: RAGContext): Promise<string> {
  try {
    // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    const knowledge = await searchKnowledge(context.userMessage)

    // –ü—Ä–æ–±—É–µ–º YandexGPT
    const yandexKey = await getAIServiceKey("yandexgpt")
    if (yandexKey) {
      return await generateYandexGPTResponse(context, knowledge)
    }

    // –ü—Ä–æ–±—É–µ–º OpenAI
    const openaiKey = await getAIServiceKey("openai")
    if (openaiKey) {
      return await generateOpenAIResponse(context, knowledge)
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
    return generateFallbackResponse(context, knowledge)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ RAG –¥–≤–∏–∂–∫–∞:", error)
    return generateFallbackResponse(context, [])
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
export async function loadDialogExamples(examples: Array<{ question: string, answer: string }>) {
  const items = examples.map(example => ({
    type: "dialog_example" as const,
    question: example.question,
    answer: example.answer,
    is_active: true,
  }))

  const { error } = await supabase
    .from("knowledge_base")
    .insert(items)

  if (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤:", error)
    return false
  }

  return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ FAQ
export async function loadFAQ(faqs: Array<{ question: string, answer: string }>) {
  const items = faqs.map(faq => ({
    type: "faq" as const,
    question: faq.question,
    answer: faq.answer,
    is_active: true,
  }))

  const { error } = await supabase
    .from("knowledge_base")
    .insert(items)

  if (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ:", error)
    return false
  }

  return true
}