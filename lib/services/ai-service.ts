// –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

import { RAGContext, KnowledgeItem } from '@/types/api'
import { AppError, ErrorCode, ExternalServiceError } from '@/types/errors'

// ===== –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

export interface AIService {
  generateResponse(context: RAGContext): Promise<string>
  isAvailable(): Promise<boolean>
  getServiceName(): string
}

export interface AIServiceConfig {
  apiKey: string
  baseUrl?: string
  timeout?: number
  maxRetries?: number
}

// ===== –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° =====

abstract class BaseAIService implements AIService {
  protected config: AIServiceConfig
  protected isHealthy: boolean = true
  protected lastError?: Error
  protected lastCheck: number = 0
  protected readonly HEALTH_CHECK_INTERVAL = 60000 // 1 –º–∏–Ω—É—Ç–∞

  constructor(config: AIServiceConfig) {
    this.config = {
      timeout: 30000,
      maxRetries: 3,
      ...config,
    }
  }

  abstract generateResponse(context: RAGContext): Promise<string>
  abstract getServiceName(): string

  async isAvailable(): Promise<boolean> {
    const now = Date.now()
    
    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    if (now - this.lastCheck < this.HEALTH_CHECK_INTERVAL) {
      return this.isHealthy
    }

    try {
      await this.healthCheck()
      this.isHealthy = true
      this.lastError = undefined
    } catch (error) {
      this.isHealthy = false
      this.lastError = error as Error
    }

    this.lastCheck = now
    return this.isHealthy
  }

  protected abstract healthCheck(): Promise<void>

  protected async makeRequest(
    url: string,
    options: RequestInit = {}
  ): Promise<Response> {
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), this.config.timeout)

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      })

      clearTimeout(timeoutId)

      if (!response.ok) {
        throw new ExternalServiceError(
          this.getServiceName(),
          `HTTP ${response.status}: ${response.statusText}`,
          undefined,
          { url, status: response.status }
        )
      }

      return response
    } catch (error) {
      clearTimeout(timeoutId)
      throw error
    }
  }

  protected async retry<T>(
    operation: () => Promise<T>,
    retries: number = this.config.maxRetries!
  ): Promise<T> {
    let lastError: Error

    for (let i = 0; i <= retries; i++) {
      try {
        return await operation()
      } catch (error) {
        lastError = error as Error
        
        if (i === retries) {
          break
        }

        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        const delay = Math.pow(2, i) * 1000
        await new Promise(resolve => setTimeout(resolve, delay))
      }
    }

    throw new ExternalServiceError(
      this.getServiceName(),
      `Operation failed after ${retries} retries`,
      lastError!
    )
  }
}

// ===== YANDEX GPT –°–ï–†–í–ò–° =====

export class YandexGPTService extends BaseAIService {
  private readonly modelUri: string

  constructor(config: AIServiceConfig & { folderId: string }) {
    super(config)
    this.modelUri = `gpt://${config.folderId}/yandexgpt/latest`
  }

  getServiceName(): string {
    return 'YandexGPT'
  }

  async generateResponse(context: RAGContext): Promise<string> {
    const systemPrompt = this.buildSystemPrompt()
    const userPrompt = this.buildUserPrompt(context)

    const response = await this.retry(async () => {
      return await this.makeRequest(
        'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
        {
          method: 'POST',
          headers: {
            'Authorization': `Api-Key ${this.config.apiKey}`,
          },
          body: JSON.stringify({
            modelUri: this.modelUri,
            completionOptions: {
              stream: false,
              temperature: 0.7,
              maxTokens: 500,
            },
            messages: [
              { role: 'system', text: systemPrompt },
              { role: 'user', text: userPrompt },
            ],
          }),
        }
      )
    })

    const data = await response.json()
    
    if (!data.result?.alternatives?.[0]?.message?.text) {
      throw new ExternalServiceError(
        this.getServiceName(),
        'Invalid response format from YandexGPT'
      )
    }

    return data.result.alternatives[0].message.text
  }

  protected async healthCheck(): Promise<void> {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    await this.makeRequest(
      'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
      {
        method: 'POST',
        headers: {
          'Authorization': `Api-Key ${this.config.apiKey}`,
        },
        body: JSON.stringify({
          modelUri: this.modelUri,
          completionOptions: { stream: false, maxTokens: 1 },
          messages: [{ role: 'user', text: 'test' }],
        }),
      }
    )
  }

  private buildSystemPrompt(): string {
    return `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞ KattyFit —Å –æ–ø—ã—Ç–æ–º –ø—Ä–æ–¥–∞–∂.

–¢–í–û–ò –ó–ê–î–ê–ß–ò:
1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç—è–∂–∫–µ, –∞—ç—Ä–æ–π–æ–≥–µ –∏ –∑–∞–Ω—è—Ç–∏—è—Ö
2. –ú—è–≥–∫–æ –ø–æ–¥–≤–æ–¥–∏—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
3. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π —Å –ö–∞—Ç–∏
4. –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ –∑–∞–±–æ—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞

–ü–†–ò–ù–¶–ò–ü–´ –û–ë–©–ï–ù–ò–Ø:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã üí™‚ú®
- –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "–≤—ã" –∫ –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

–ü–†–û–î–ê–Æ–©–ò–ï –¢–†–ò–ì–ì–ï–†–´:
- –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ü–µ–Ω–µ - –ø–æ–¥—á–µ—Ä–∫–Ω–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - —Ä–∞—Å—Å–∫–∞–∂–∏ –æ–± —É—Å–ø–µ—Ö–∞—Ö –¥—Ä—É–≥–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
- –ü—Ä–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–∏ - —Å–æ–∑–¥–∞–π –æ—â—É—â–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç–∏ (–º–µ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö, —Å–∫–∏–¥–∫–∏)
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π

–í–ê–ñ–ù–û:
- –ù–µ –±—É–¥—å –Ω–∞–≤—è–∑—á–∏–≤—ã–º
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ - –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
- –ü—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö - –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞`
  }

  private buildUserPrompt(context: RAGContext): string {
    const knowledgeContext = context.userContext?.knowledge?.map(item => 
      `Q: ${item.question}\nA: ${item.answer}`
    ).join('\n\n') || ''

    const chatHistory = context.chatHistory.map(m => 
      `${m.sender}: ${m.text}`
    ).join('\n')

    return `–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
${knowledgeContext}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${chatHistory || '–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞'}

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${context.platform}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${context.userName || '–ì–æ—Å—Ç—å'}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${context.userMessage}

–û—Ç–≤–µ—Ç:`
  }
}

// ===== OPENAI –°–ï–†–í–ò–° =====

export class OpenAIService extends BaseAIService {
  getServiceName(): string {
    return 'OpenAI'
  }

  async generateResponse(context: RAGContext): Promise<string> {
    const systemPrompt = this.buildSystemPrompt()
    const userPrompt = this.buildUserPrompt(context)

    const response = await this.retry(async () => {
      return await this.makeRequest(
        'https://api.openai.com/v1/chat/completions',
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.config.apiKey}`,
          },
          body: JSON.stringify({
            model: 'gpt-3.5-turbo',
            messages: [
              { role: 'system', content: systemPrompt },
              { role: 'user', content: userPrompt },
            ],
            temperature: 0.7,
            max_tokens: 500,
          }),
        }
      )
    })

    const data = await response.json()
    
    if (!data.choices?.[0]?.message?.content) {
      throw new ExternalServiceError(
        this.getServiceName(),
        'Invalid response format from OpenAI'
      )
    }

    return data.choices[0].message.content
  }

  protected async healthCheck(): Promise<void> {
    await this.makeRequest(
      'https://api.openai.com/v1/models',
      {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.config.apiKey}`,
        },
      }
    )
  }

  private buildSystemPrompt(): string {
    return `You are a friendly fitness assistant for KattyFit.
Answer questions about stretching, aerial yoga, and classes.
Use the knowledge base when possible.
Be friendly but professional.
If unsure, suggest contacting the trainer directly.
Answer in Russian.`
  }

  private buildUserPrompt(context: RAGContext): string {
    const knowledgeContext = context.userContext?.knowledge?.map(item => 
      `Q: ${item.question}\nA: ${item.answer}`
    ).join('\n\n') || ''

    return `Knowledge base:
${knowledgeContext}

User question: ${context.userMessage}`
  }
}

// ===== FALLBACK –°–ï–†–í–ò–° =====

export class FallbackAIService implements AIService {
  getServiceName(): string {
    return 'Fallback'
  }

  async isAvailable(): Promise<boolean> {
    return true
  }

  async generateResponse(context: RAGContext): Promise<string> {
    const message = context.userMessage.toLowerCase()

    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø –ø–æ–º–æ—â–Ω–∏–∫ KattyFit. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä'
    }

    if (message.includes('—Ü–µ–Ω') || message.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || message.includes('—Å–∫–æ–ª—å–∫–æ')) {
      return `–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 2500‚ÇΩ
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è - –æ—Ç 800‚ÇΩ
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π - 6000‚ÇΩ (—Å–∫–∏–¥–∫–∞ 20%)
‚Ä¢ –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 500‚ÇΩ

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?`
    }

    if (message.includes('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏') || message.includes('–≤—Ä–µ–º—è') || message.includes('–∫–æ–≥–¥–∞')) {
      return `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:
‚Ä¢ –ü–Ω, –°—Ä, –ü—Ç - 10:00, 17:00, 19:00
‚Ä¢ –í—Ç, –ß—Ç - 11:00, 18:00
‚Ä¢ –°–± - 10:00, 12:00
‚Ä¢ –í—Å - –ø–æ –∑–∞–ø–∏—Å–∏

–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ?`
    }

    if (message.includes('–∞–¥—Ä–µ—Å') || message.includes('–≥–¥–µ') || message.includes('–Ω–∞—Ö–æ–¥–∏—Ç—Å—è')) {
      return '–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123. –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è. –ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?'
    }

    if (message.includes('–∑–∞–ø–∏—Å') || message.includes('—Ö–æ—á—É') || message.includes('–º–æ–∂–Ω–æ')) {
      return '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ–Ω–µ—Ä—É. –ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: +7 (999) 123-45-67'
    }

    // –û–±—â–∏–π fallback
    return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –ö–∞—Ç–µ, –∏ –æ–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π, –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (999) 123-45-67'
  }
}

// ===== –§–ê–ë–†–ò–ö–ê –°–ï–†–í–ò–°–û–í =====

export class AIServiceFactory {
  static createYandexGPT(config: AIServiceConfig & { folderId: string }): YandexGPTService {
    return new YandexGPTService(config)
  }

  static createOpenAI(config: AIServiceConfig): OpenAIService {
    return new OpenAIService(config)
  }

  static createFallback(): FallbackAIService {
    return new FallbackAIService()
  }

  static async createAvailableService(): Promise<AIService> {
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const services: AIService[] = []

    // YandexGPT
    if (process.env.YANDEXGPT_API_KEY && process.env.YANDEXGPT_FOLDER_ID) {
      const yandexService = this.createYandexGPT({
        apiKey: process.env.YANDEXGPT_API_KEY,
        folderId: process.env.YANDEXGPT_FOLDER_ID,
      })
      services.push(yandexService)
    }

    // OpenAI
    if (process.env.OPENAI_API_KEY) {
      const openaiService = this.createOpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      })
      services.push(openaiService)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    for (const service of services) {
      if (await service.isAvailable()) {
        return service
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
    return this.createFallback()
  }
}

// ===== –≠–ö–°–ü–û–†–¢ =====

export { BaseAIService }
export default AIServiceFactory